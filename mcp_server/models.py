# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:08:23+00:00

from __future__ import annotations

from typing import Any, Dict, List

from pydantic import BaseModel, Field, constr


class DocDetails(BaseModel):
    DOB: constr(min_length=1) = Field(
        ...,
        description='Date of birth of the DigiLocker user accessing the document/certificate as in Aadhaar in DD-MM-YYYY format. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.',
        examples=['31-12-1990'],
    )
    DigiLockerId: constr(min_length=1) = Field(
        ...,
        description='A unique 36 character DigiLocker Id of the user account.',
        examples=['123e4567-e89b-12d3-a456-426655440000'],
    )
    FullName: constr(min_length=1) = Field(
        ...,
        description='Name of the DigiLocker user accessing the document/certificate as in Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.',
        examples=['Sunil Kumar'],
    )
    UID: constr(min_length=1) = Field(
        ...,
        description='Aadhaar number of the DigiLocker user accessing the document/certificate. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.',
        examples=[123456789012],
    )
    URI: constr(min_length=1) = Field(
        ...,
        description='URI identifies the document uniquely.',
        examples=['in.gov.kerala.edistrict-INCER-123456'],
    )


class PullDocRequest(BaseModel):
    DocDetails_1: DocDetails = Field(..., alias='DocDetails')
    format: constr(min_length=1) = Field(
        ...,
        description='The certificate data in the response. Possible values of this attribute are:\n  xml: for certificate data in machine readable xml format\n  pdf: for certificate data in printable pdf format\n  both: for certificate data in both xml and pdf format. If the format attribute is not present in the request, then the API must return Base64 encoded PDF data in the response. Please see the response section below for more details.',
    )
    orgId: str = Field(
        ...,
        description='Org Id is the user id provided to the Digital Locker application by the issuer application for accessing the API.',
    )
    ts: constr(min_length=1) = Field(
        ...,
        description='A timestamp value. This will be used to decode the keyHash element described below.',
    )
    txn: str = Field(..., description='Transaction id.')
    ver: constr(min_length=1) = Field(..., description='API version.')


class DocDetails1(BaseModel):
    DataContent: constr(min_length=1) = Field(
        ...,
        description='Enclose the Base64 byte encoded certificate metadata in XML format. The DataContent element should be sent only if the original request contains format attribute as “xml” or “both”.',
    )
    DocContent: constr(min_length=1) = Field(
        ...,
        description='Enclose the Base64 byte encoded contents of PDF file in this element. The DocContent element should be sent only if the format attribute in the original request is sent as “pdf” or “both” or is absent.',
    )


class ResponseStatus(BaseModel):
    Status: constr(min_length=1) = Field(..., description='1 for success, 0 for error.')
    ts: constr(min_length=1) = Field(
        ..., description='A timestamp value as sent in the request.'
    )
    txn: str = Field(..., description='Transaction id value as sent in the request.')


class PullDocResponse(BaseModel):
    DocDetails: DocDetails1 = Field(
        ..., description='Issuer can add meta content specific to document here.'
    )
    ResponseStatus_1: ResponseStatus = Field(..., alias='ResponseStatus')


class DocDetails2(BaseModel):
    DOB: List[Dict[str, Any]] = Field(
        ...,
        description='Date of birth of the DigiLocker user searching for the document/certificate as on Aadhaar in DD-MM-YYYY format. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.',
        examples=['09-08-1989'],
    )
    DigiLockerId: List[Dict[str, Any]] = Field(
        ...,
        description='A unique 36 character DigiLocker Id of the user account.',
        examples=['123e4567-e89b-12d3-a456-426655440000'],
    )
    DocType: List[Dict[str, Any]] = Field(
        ...,
        description='Digital Locker will pass the document type being searched in this parameter.',
        examples=['Pdf'],
    )
    FullName: List[Dict[str, Any]] = Field(
        ...,
        description='Name of the DigiLocker user searching for the document/certificate as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.',
        examples=['Sunil'],
    )
    Photo: List[Dict[str, Any]] = Field(
        ...,
        description='The base 64 encoded contents of JPEG photograph as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.',
    )
    UDF1: List[Dict[str, Any]] = Field(
        ...,
        description='User defined search parameters to search a unique document/certificate. The <UDF> may be <RollNo> for CBSE, <RegistrationNo> for Transportation Dept. and <PAN> for Income Tax Dept. The search parameters for the API will be configured in the issuer portal of Digital Locker while configuring this API.',
    )
    UDF2: List[Dict[str, Any]]
    UDF3: List[Dict[str, Any]]
    UDFn: List[Dict[str, Any]]
    UID: List[Dict[str, Any]] = Field(
        ...,
        description='Aadhaar number of the DigiLocker user searching for the document/certificate. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.',
        examples=[123443211122],
    )


class PullURIRequest(BaseModel):
    DocDetails: DocDetails2
    format: constr(min_length=1) = Field(
        ...,
        description='Indicates the desired format of the certificate data in the response. Possible values of this attribute are:\n  xml: for certificate data in machine readable xml format.\n  pdf: for certificate data in printable pdf format\n  both: for certificate data in both xml and pdf format. If the format attribute is not present in the request, then the API must return Base64 encoded PDF data in the response. Please see the response section below for more details',
    )
    orgId: str = Field(
        ...,
        description='Org Id is the user id provided to the Digital Locker application by the issuer application for accessing the API.',
    )
    ts: constr(min_length=1) = Field(
        ...,
        description='A timestamp value. This will be used to decode the keyHash element described below.',
    )
    txn: constr(min_length=1) = Field(..., description='Transaction id.')
    ver: constr(min_length=1) = Field(..., description='API version.')


class DocDetails3(BaseModel):
    DOB: constr(min_length=1) = Field(
        ...,
        description='The date of birth if sent in the original request.',
        examples=['31-12-1990'],
    )
    DataContent: constr(min_length=1) = Field(
        ...,
        description='Enclose the base64 byte encoded certificate metadata in XML format. The DataContent element should be sent only if the original request contains format attribute as “xml” or “both”.',
    )
    DigiLockerId: constr(min_length=1) = Field(
        ...,
        description='A unique 36 character DigiLocker Id as sent in the original request.',
        examples=['123e4567-e89b-12d3-a456-426655440000'],
    )
    DocContent: constr(min_length=1) = Field(
        ...,
        description='Enclose the Base64 byte encoded contents of PDF file in this element.',
    )
    DocType: constr(min_length=1) = Field(
        ...,
        description='The document type sent in the original request.',
        examples=['INCER'],
    )
    FullName: constr(min_length=1) = Field(
        ...,
        description='The full name if sent in the original request.',
        examples=['Sunil Kumar'],
    )
    UDF1: constr(min_length=1) = Field(
        ...,
        description='Search parameters sent in the original request.',
        examples=[1333],
    )
    UDF2: constr(min_length=1) = Field(
        ...,
        description='Search parameters sent in the original request.',
        examples=[2016],
    )
    UID: constr(min_length=1) = Field(
        ...,
        description='The Aadhaar number if sent in the original request.',
        examples=[123412341234],
    )
    URI: constr(min_length=1) = Field(
        ...,
        description='URI corresponding to the search criteria that identifies the document uniquely.',
        examples=['in.gov.dept.state-INCER-1234567'],
    )


class ResponseStatus1(BaseModel):
    Status: constr(min_length=1) = Field(
        ..., description='1 for success, 0 for error and 9 for pending.'
    )
    ts: constr(min_length=1) = Field(
        ..., description='A timestamp value as sent in the request.'
    )
    txn: constr(min_length=1) = Field(
        ..., description='Transaction id value as sent in the request.'
    )


class PullURIResponse(BaseModel):
    DocDetails: DocDetails3 = Field(
        ..., description='Issuer can add meta content specific to document here.'
    )
    ResponseStatus: ResponseStatus1
